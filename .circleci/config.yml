version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0
  python: circleci/python@2.1.1

jobs:
  # Job 1: Run tests
  test:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run unit tests
          command: |
            mkdir -p test-results
            pytest tests/ --cov=app --cov-report=html --cov-report=term --junit-xml=test-results/junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov

  # Job 2: Code quality and linting
  lint:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run flake8
          command: |
            flake8 app/ --max-line-length=120 --exclude=__pycache__
      - run:
          name: Check code formatting
          command: |
            pip install black
            black --check app/

  # Job 3: Security scanning
  security-scan:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run Bandit security scan
          command: |
            bandit -r app/ -f json -o bandit-report.json || true
            bandit -r app/ -f screen
      - store_artifacts:
          path: bandit-report.json
      - run:
          name: Check dependencies for vulnerabilities
          command: |
            pip install safety
            safety check --json || true

  # Job 4: Build and scan Docker image
  docker-security-scan:
    machine: true
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: |
            docker build -t flask-api:${CIRCLE_SHA1} .
      - run:
          name: Install Trivy
          command: |
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy
      - run:
          name: Scan Docker image for vulnerabilities
          command: |
            trivy image --severity HIGH,CRITICAL flask-api:${CIRCLE_SHA1}

    # Job 5: Build and push to ECR
  build-and-push:
    docker:
      - image: cimg/aws:2023.09
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            docker build -t ${AWS_ECR_REPOSITORY_URL}:latest .
      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_REPOSITORY_URL}
      - run:
          name: Push to ECR
          command: |
            docker push ${AWS_ECR_REPOSITORY_URL}:latest

  # ...existing code...
  # Job 6: Deploy to ECS
  deploy-to-ecs:
    docker:
      - image: cimg/aws:2023.09
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Verify environment variables
          command: |
            echo "=== Environment Variables Check ==="
            echo "ECS_CLUSTER_NAME: ${ECS_CLUSTER_NAME}"
            echo "ECS_SERVICE_NAME: ${ECS_SERVICE_NAME}"
            echo "AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}"
            echo "AWS_ECR_REPOSITORY_URL: ${AWS_ECR_REPOSITORY_URL}"

            # Check if variables are empty
            if [ -z "$ECS_CLUSTER_NAME" ]; then echo "ERROR: ECS_CLUSTER_NAME is not set"; exit 1; fi
            if [ -z "$ECS_SERVICE_NAME" ]; then echo "ERROR: ECS_SERVICE_NAME is not set"; exit 1; fi
            if [ -z "$AWS_DEFAULT_REGION" ]; then echo "ERROR: AWS_DEFAULT_REGION is not set"; exit 1; fi
            if [ -z "$AWS_ECR_REPOSITORY_URL" ]; then echo "ERROR: AWS_ECR_REPOSITORY_URL is not set"; exit 1; fi

            echo "✅ All environment variables are set"
      - run:
          name: Test AWS connectivity
          command: |
            echo "=== AWS Connectivity Test ==="
            aws --version
            aws sts get-caller-identity

            # Test ECS cluster access
            echo "Testing ECS cluster access..."
            aws ecs describe-clusters --clusters "${ECS_CLUSTER_NAME}" --region "${AWS_DEFAULT_REGION}"

            # Test ECS service access
            echo "Testing ECS service access..."
            aws ecs describe-services --cluster "${ECS_CLUSTER_NAME}" --services "${ECS_SERVICE_NAME}" --region "${AWS_DEFAULT_REGION}"
      - run:
          name: Force new deployment (simple approach)
          command: |
            echo "=== Starting Simple Force Deployment ==="
            echo "Cluster: ${ECS_CLUSTER_NAME}"
            echo "Service: ${ECS_SERVICE_NAME}"
            echo "Region: ${AWS_DEFAULT_REGION}"

            # Simple force deployment first
            aws ecs update-service \
              --cluster "${ECS_CLUSTER_NAME}" \
              --service "${ECS_SERVICE_NAME}" \
              --force-new-deployment \
              --region "${AWS_DEFAULT_REGION}"

            echo "✅ Force deployment command completed"
      - run:
          name: Wait for deployment (with timeout)
          command: |
            echo "=== Waiting for Service Stability ==="

            # Wait with timeout
            timeout 10m aws ecs wait services-stable \
              --cluster "${ECS_CLUSTER_NAME}" \
              --services "${ECS_SERVICE_NAME}" \
              --region "${AWS_DEFAULT_REGION}" || {
                echo "⚠️ Service stability wait timed out or failed"
                echo "Checking current service status..."
                aws ecs describe-services \
                  --cluster "${ECS_CLUSTER_NAME}" \
                  --services "${ECS_SERVICE_NAME}" \
                  --region "${AWS_DEFAULT_REGION}" \
                  --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,Events:events[0:3]}'
                exit 1
              }

            echo "✅ Service is stable"
      - run:
          name: Verify deployment
          command: |
            echo "=== Final Deployment Status ==="
            aws ecs describe-services \
              --cluster "${ECS_CLUSTER_NAME}" \
              --services "${ECS_SERVICE_NAME}" \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'services[0].{ServiceName:serviceName,Status:status,RunningCount:runningCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition,LastUpdated:updatedAt}'

            echo "✅ Deployment verification complete"
# ...existing code...
workflows:
  build-test-deploy:
    jobs:
      # Stage 1: Testing and Security (parallel)
      - test
      - lint
      - security-scan
      - docker-security-scan

      # Stage 2: Build and Push (after all tests pass)
      - build-and-push:
          requires:
            - test
            - lint
            - security-scan
            - docker-security-scan

      # Stage 3: Deploy (after successful build, only on main)
      - deploy-to-ecs:
          requires:
            - build-and-push
          filters:
            branches:
              only:
                - main
