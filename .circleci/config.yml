version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0
  python: circleci/python@2.1.1

jobs:
  # Job 1: Run tests
  test:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run unit tests
          command: |
            mkdir -p test-results
            pytest tests/ --cov=app --cov-report=html --cov-report=term --junit-xml=test-results/junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov

  # Job 2: Code quality and linting
  lint:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run flake8
          command: |
            flake8 app/ --max-line-length=120 --exclude=__pycache__
      - run:
          name: Check code formatting
          command: |
            pip install black
            black --check app/

  # Job 3: Security scanning
  security-scan:
    docker:
      - image: cimg/python:3.11
    resource_class: medium
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run Bandit security scan
          command: |
            bandit -r app/ -f json -o bandit-report.json || true
            bandit -r app/ -f screen
      - store_artifacts:
          path: bandit-report.json
      - run:
          name: Check dependencies for vulnerabilities
          command: |
            pip install safety
            safety check --json || true

  # Job 4: Build and scan Docker image
  docker-security-scan:
    machine: true
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: |
            docker build -t flask-api:${CIRCLE_SHA1} .
      - run:
          name: Install Trivy
          command: |
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy
      - run:
          name: Scan Docker image for vulnerabilities
          command: |
            trivy image --severity HIGH,CRITICAL flask-api:${CIRCLE_SHA1}

    # Job 5: Build and push to ECR
  build-and-push:
    docker:
      - image: cimg/aws:2023.09
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            docker build -t ${AWS_ECR_REPOSITORY_URL}:latest .
      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_REPOSITORY_URL}
      - run:
          name: Push to ECR
          command: |
            docker push ${AWS_ECR_REPOSITORY_URL}:latest

  # ...existing code...
  # Job 6: Deploy to ECS
  deploy-to-ecs:
    docker:
      - image: cimg/aws:2023.09
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Validate environment variables
          command: |
            set -euo pipefail
            : "${ECS_CLUSTER_NAME:?ECS_CLUSTER_NAME is not set}"
            : "${ECS_SERVICE_NAME:?ECS_SERVICE_NAME is not set}"
            : "${AWS_DEFAULT_REGION:?AWS_DEFAULT_REGION is not set}"
            : "${AWS_ECR_REPOSITORY_URL:?AWS_ECR_REPOSITORY_URL is not set}"
            echo "✅ Required environment variables are set"
      - run:
          name: Test AWS connectivity
          command: |
            set -euo pipefail
            echo "=== AWS Connectivity Test ==="
            aws --version
            aws sts get-caller-identity

            # Test ECS cluster access
            echo "Testing ECS cluster access..."
            aws ecs describe-clusters --clusters "${ECS_CLUSTER_NAME}" --region "${AWS_DEFAULT_REGION}"

            # Test ECS service access
            echo "Testing ECS service access..."
            aws ecs describe-services --cluster "${ECS_CLUSTER_NAME}" --services "${ECS_SERVICE_NAME}" --region "${AWS_DEFAULT_REGION}"
      - run:
          name: Update ECS service
          command: |
            set -euo pipefail
            echo "=== Triggering ECS Deployment ==="
            echo "Cluster: ${ECS_CLUSTER_NAME}"
            echo "Service: ${ECS_SERVICE_NAME}"
            echo "Region: ${AWS_DEFAULT_REGION}"

            aws ecs update-service \
              --cluster "${ECS_CLUSTER_NAME}" \
              --service "${ECS_SERVICE_NAME}" \
              --force-new-deployment \
              --region "${AWS_DEFAULT_REGION}"

            echo "✅ ECS update-service command completed"
      - run:
          name: Wait for service to stabilize
          command: |
            set -euo pipefail
            echo "Waiting up to 10 minutes for service to stabilize..."
            if ! timeout 10m aws ecs wait services-stable --cluster "${ECS_CLUSTER_NAME}" --services "${ECS_SERVICE_NAME}" --region "${AWS_DEFAULT_REGION}"; then
              echo "Service did not stabilize; showing diagnostics..."
              aws ecs describe-services \
                --cluster "${ECS_CLUSTER_NAME}" \
                --services "${ECS_SERVICE_NAME}" \
                --region "${AWS_DEFAULT_REGION}" \
                --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,Events:events[0:5]}'
              exit 1
            fi
            echo "✅ Service is stable"
      - run:
          name: Verify deployment
          command: |
            set -euo pipefail
            echo "=== Final Deployment Status ==="
            aws ecs describe-services \
              --cluster "${ECS_CLUSTER_NAME}" \
              --services "${ECS_SERVICE_NAME}" \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'services[0].{ServiceName:serviceName,Status:status,RunningCount:runningCount,DesiredCount:desiredCount,TaskDefinition:taskDefinition,LastUpdated:updatedAt}'
            echo "✅ Deployment verification complete"

  # Job 7: Store ECS IP in Secrets Manager
  store-ecs-ip:
    docker:
      - image: cimg/aws:2023.09
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install jq
          command: |
            sudo apt-get update && sudo apt-get install -y jq
      - run:
          name: Get ECS task IP and update Secrets Manager
          command: |
            set -euo pipefail
            echo "=== Getting ECS Task Public IP ==="

            # Get running task ARN
            TASK_ARN=$(aws ecs list-tasks \
              --cluster "${ECS_CLUSTER_NAME}" \
              --service-name "${ECS_SERVICE_NAME}" \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'taskArns[0]' \
              --output text)

            # Don't fail the whole pipeline if no public IP found
            [ -n "$TASK_ARN" ] && [ "$TASK_ARN" != "None" ] || { echo "No running tasks found"; exit 0; }
            echo "Task ARN: $TASK_ARN"

            # Get ENI from task
            ENI=$(aws ecs describe-tasks \
              --cluster "${ECS_CLUSTER_NAME}" \
              --tasks "$TASK_ARN" \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
              --output text)

            [ -n "$ENI" ] && [ "$ENI" != "None" ] || { echo "No ENI found; task likely in private subnet"; exit 0; }
            echo "ENI ID: $ENI"

            # Get public IP
            PUBLIC_IP=$(aws ec2 describe-network-interfaces \
              --network-interface-ids "$ENI" \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'NetworkInterfaces[0].Association.PublicIp' \
              --output text)

            [ -n "$PUBLIC_IP" ] && [ "$PUBLIC_IP" != "None" ] || { echo "No public IP found"; exit 0; }
            echo "Public IP: $PUBLIC_IP"

            # Get current secret (or empty JSON if doesn't exist)
            CUR=$(aws secretsmanager get-secret-value \
              --secret-id "prod/AgenticAI/Keys" \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'SecretString' \
              --output text 2>/dev/null || echo "{}")

            # Create new secret with IP and timestamp
            NEW=$(echo "$CUR" | jq --arg ip "$PUBLIC_IP" --arg ts "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" '.api_ip_address = $ip | .last_updated = $ts | .deployment_source = "circleci"')

            # Only update if IP changed
            if [ "$(echo "$CUR" | jq -r '.api_ip_address // empty')" != "$PUBLIC_IP" ]; then
              # Create secret if it doesn't exist
              aws secretsmanager describe-secret \
                --secret-id "prod/AgenticAI/Keys" \
                --region "${AWS_DEFAULT_REGION}" >/dev/null 2>&1 || {
                echo "Creating new secret..."
                aws secretsmanager create-secret \
                  --name "prod/AgenticAI/Keys" \
                  --description "API Keys and Configuration for AgenticAI" \
                  --secret-string '{}' \
                  --region "${AWS_DEFAULT_REGION}"
              }
              
              aws secretsmanager update-secret \
                --secret-id "prod/AgenticAI/Keys" \
                --secret-string "$NEW" \
                --region "${AWS_DEFAULT_REGION}"
              
              echo "✅ Secrets Manager updated with new IP: $PUBLIC_IP"
            else
              echo "Public IP unchanged; skipping secrets update"
            fi
# ...existing code...
workflows:
  build-test-deploy:
    jobs:
      # Stage 1: Testing and Security (parallel)
      - test
      - lint
      - security-scan
      - docker-security-scan

      # Stage 2: Build and Push (after all tests pass)
      - build-and-push:
          requires:
            - test
            - lint
            - security-scan
            - docker-security-scan

      # Stage 3: Deploy (after successful build, only on main)
      - deploy-to-ecs:
          requires:
            - build-and-push
          filters:
            branches:
              only:
                - main

      # Stage 4: Store IP in Secrets Manager (after successful deployment)
      - store-ecs-ip:
          requires:
            - deploy-to-ecs
          filters:
            branches:
              only:
                - main
